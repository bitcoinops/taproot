#### 2.4.5 Programming Exercise: Generate a 2-of-2 csahasholder tapscript.

```
# Generate key pairs.
privkey0 = ECKey().generate()
privkey1 = ECKey().generate()
privkey2 = ECKey().generate()

pubkey0 = privkey0.get_pubkey()
pubkey1 = privkey1.get_pubkey()
pubkey2 = privkey2.get_pubkey()

c_map, pk_musig = generate_musig_key([pubkey1, pubkey2])
privkey1_c = privkey1.mul(c_map[pubkey1])
privkey2_c = privkey2.mul(c_map[pubkey2])

print("Single pubkey: {}".format(pubkey0.get_bytes().hex()))
print("MuSig pubkey: {}\n".format(pk_musig.get_bytes().hex()))

secret = b'secret'
preimage = hashlib.new('sha256', secret).digest()
digest = hashlib.new('ripemd160', preimage).digest()
delay = 20

# Construct Tapscript
csahasholder_tapscript = TapLeaf()
csahasholder_tapscript.construct_csahasholder(2, [pubkey0, pk_musig], digest, delay)
print("Descriptor:", csahasholder_tapscript.desc, "\n")

print("Tapscript operations:")
for op in csahasholder_tapscript.script:
    print(op.hex()) if isinstance(op, bytes) else print(op)

print("\nSatisfying witness elements:")
for element, value in csahasholder_tapscript.sat:
    print("{}, {}".format(element, value.hex()))
```

#### _2.4.6 Programming Exercise:_ Compute the taptweak from a tapscript.

```
def tagged_hash(tag, input_data):
    data = hashlib.sha256(tag.encode('utf-8')).digest()
    data += data
    data += input_data
    return hashlib.sha256(data).digest()

privkey_internal = ECKey().generate()
pubkey_internal = privkey_internal.get_pubkey()

TAPSCRIPT_VER = bytes([0xc0])
tapleaf = tagged_hash("TapLeaf", TAPSCRIPT_VER + ser_string(csahasholder_tapscript.script))
taptweak = tagged_hash("TapTweak", pubkey_internal.get_bytes() + tapleaf)
print("Your constructed taptweak is: {}.".format(taptweak.hex()))
```

#### Programming Exercise 2.4.12: Construct CTransaction and populate inputs
```
# Construct transaction
spending_tx = CTransaction()

# Populate the transaction version
spending_tx.nVersion = 2

# Populate the locktime
spending_tx.nLockTime = 0

# Populate the transaction inputs
outpoint = COutPoint(tx.sha256, output_index)
spending_tx_in = CTxIn(outpoint = outpoint, nSequence=delay)
spending_tx.vin = [spending_tx_in]

print("Spending transaction:\n{}".format(spending_tx))
```

####Â Programming Exercise 2.4.14: Sign the transaction with MuSig and single keys

```
# Generate the Taproot Signature Hash for signing
hash_types = [0,1,2,3,0x81,0x82,0x83]
sighash = TaprootSignatureHash(spending_tx, [output], hash_types[0], input_index = 0, scriptpath = True, tapscript=csahasholder_tapscript.script)

# Signing for MuSig key.
k0 = generate_schnorr_nonce()
k1 = generate_schnorr_nonce()
R0 = k0.get_pubkey()
R1 = k1.get_pubkey()
commitment_R0 = hashlib.new('sha256', R0.get_bytes()).digest()
commitment_R1 = hashlib.new('sha256', R1.get_bytes()).digest()
R_agg, negate = aggregate_schnorr_nonces([R0, R1])
if negate:
    k0.negate()
    k1.negate()
signature1 = sign_musig(privkey1_c, k0, R_agg, pk_musig, sighash)
signature2 = sign_musig(privkey2_c, k1, R_agg, pk_musig, sighash)
signature_musig = aggregate_musig_signatures([signature1, signature2])

# Signing for pk0.
signature0 = privkey0.sign_schnorr(sighash)

print("Signature_musig: {}\n".format(signature_musig.hex()))
print("Signature0: {}".format(signature0.hex()))
```

#### Programming Exercise 2.4.15: Add the witness and test acceptance of the transaction.

```
# Construct transaction witness
witness = CScriptWitness()
witness.stack = [preimage, signature_musig, signature0, csahasholder_tapscript.script, control_map[csahasholder_tapscript.script]]
witness_in = CTxInWitness()
witness_in.scriptWitness = witness

# vtxinwit is a list of the witness data(i.e. signatures etc.)
spending_tx.wit.vtxinwit.append(witness_in)

print("Spending transaction:\n{}\n".format(spending_tx))

# Serialize signed transaction for broadcast
spending_tx_str = spending_tx.serialize().hex()

# Test mempool acceptance with and without delay.
assert not test.nodes[0].testmempoolaccept([spending_tx_str])[0]['allowed']
test.nodes[0].generate(delay)
assert test.nodes[0].testmempoolaccept([spending_tx_str])[0]['allowed']

print("Success!")
```
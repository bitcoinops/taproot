#### 1.1.2 Verify that inverse nonce values `k` and `-k` generate inverse points `R` and `-R`

```
# Generate a random value in the secp256k1 field
k = random.randrange(1, SECP256K1_ORDER)

# Create an uncompressed key from k so it's easier to access the y-coordinate, and get the pubkey
k_key = ECKey().set(k, False)
R = k_key.get_pubkey()

# Find the x- and y-coordinates from R
R_x = int.from_bytes(R.get_bytes()[1:33], "big")
R_y = int.from_bytes(R.get_bytes()[33:], "big")

# Find k's inverse (SECP256K1_ORDER - k)
minus_k = SECP256K1_ORDER - k

# Create an uncompressed key from -k so it's easier to access the y-coordinate, and get the pubkey
minus_k_key = ECKey().set(minus_k, False)
minus_R = minus_k_key.get_pubkey()

# Find the x- and y-coordinates from -R
minus_R_x = int.from_bytes(minus_R.get_bytes()[1:33], "big")
minus_R_y = int.from_bytes(minus_R.get_bytes()[33:], "big")

assert R_x == minus_R_x
assert SECP256K1_FIELD_SIZE - R_y == minus_R_y

print("Success!")
```

#### 1.1.3 Sign a message with Schnorr

```
msg = hashlib.sha256(b'message').digest()
x = ECKey().generate()
P = x.get_pubkey()

# Generate a random uncompressed key k so it's easier to access the y-coordinate, and get the pubkey
k = ECKey().generate(False)
R = k.get_pubkey()

# Check that nonce is quadratic residue modulo the field size
# If not, negate k
# Method: jacobi_symbol(int(y(R)), SECP256K1_FIELD_SIZE)
if jacobi_symbol(int.from_bytes(R.get_bytes()[33:], "big"), SECP256K1_FIELD_SIZE) != 1:
    k.negate()

# Generate s = k + sha256(R_x|P|msg) * x
# Method: hashlib.sha256(bytes).digest() will give you the byte digest of the SHA256 of some bytes
# Turn that digest into a ECKey object called h, and then set s = k + h * x
h_b = hashlib.sha256(R.get_bytes()[1:33] + P.get_bytes() + msg).digest()
h = ECKey().set(h_b, True)
s = k + h * x

# Generate sig = R_x|s
# Method: get the x bytes from R and concatenate with the secret bytes from s
sig = R.get_bytes()[1:33] + s.secret.to_bytes(32,'big')

# Verify the signature
assert P.verify_schnorr(sig, msg)

print("Success!")
```

#### 1.1.4 Signing Schnorr with deterministic nonce

```
# Use the same message and pubkey as above
print("message = {}".format(msg))
print("pubkey = {}".format(P.get_bytes()))

# Generate the nonce value k deterministically
k_bytes = hashlib.sha256(x.get_bytes() + msg).digest()
k = ECKey().set(k_bytes, False) 
R = k.get_pubkey()

# Check that nonce is quadratic residue modulo the field size
if jacobi_symbol(int.from_bytes(R.get_bytes()[33:], "big"), SECP256K1_FIELD_SIZE) != 1:
    k.negate()

# Generate s = k + H(R_x|P|msg) * x
# Method: hashlib.sha256(bytes).digest() will give you the byte digest of the SHA256 of some bytes
h_b = hashlib.sha256(R.get_bytes()[1:33] + P.get_bytes() + msg).digest()
h = ECKey().set(h_b, True)
s = k + h * x

# Generate sig = R_x|s
sig = R.get_bytes()[1:33] + s.secret.to_bytes(32,'big')

# Also, generate alternative sig with ECKey.sign_schnorr(msg)
sig2 = x.sign_schnorr(msg)

# Verify and compare signature(s)
assert P.verify_schnorr(sig, msg)
assert P.verify_schnorr(sig2, msg)
assert sig == sig2

print("Success!")
```

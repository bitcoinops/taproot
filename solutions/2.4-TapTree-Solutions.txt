#### Programming Exercise 2.4.1: Compute a taptweak from a taptree

```
TAPSCRIPT_VER = bytes([0xc0]) # See TapScript chapter for more details.
internal_pubkey = ECPubKey()
internal_pubkey.set(bytes.fromhex('03af455f4989d122e9185f8c351dbaecd13adca3eef8a9d38ef8ffed6867e342e3'))

# Derive pay-to-pubkey scripts.
privkeyA = ECKey().generate()
privkeyB = ECKey().generate()
privkeyC = ECKey().generate()
pubkeyA = privkeyA.get_pubkey()
pubkeyB = privkeyA.get_pubkey()
pubkeyC = privkeyA.get_pubkey()
scriptA = CScript([pubkeyA.get_bytes(), OP_CHECKSIG])
scriptB = CScript([pubkeyB.get_bytes(), OP_CHECKSIG])
scriptC = CScript([pubkeyC.get_bytes(), OP_CHECKSIG])

# Method: Returns Tagged Hash.
def tagged_hash(tag, input_data):
    data = hashlib.sha256(tag.encode('utf-8')).digest()
    data += data
    data += input_data
    return hashlib.sha256(data).digest()

# Method: Returns TapBranch hash.
def tapbranch(taggedhash_left, taggedhash_right):
    if taggedhash_left > taggedhash_right:
        taggedhash_left, taggedhash_right = taggedhash_right, taggedhash_left
    return tagged_hash("TapBranch", taggedhash_left + taggedhash_right)  

# 1) Compute TapLeafs A, B and C.
# Note: ser_string(data) is a function which adds compactsize to input data.
hash_inputA = TAPSCRIPT_VER + ser_string(scriptA)
hash_inputB = TAPSCRIPT_VER + ser_string(scriptB)
hash_inputC = TAPSCRIPT_VER + ser_string(scriptC)
taggedhash_leafA = tagged_hash("TapLeaf", hash_inputA)
taggedhash_leafB = tagged_hash("TapLeaf", hash_inputB)
taggedhash_leafC = tagged_hash("TapLeaf", hash_inputC)

# 2) Compute Internal node TapBranch AB.
internal_nodeAB = tapbranch(taggedhash_leafA, taggedhash_leafB)

# 3) Compute TapTweak.
rootABC = tapbranch(internal_nodeAB, taggedhash_leafC)
taptweak = tagged_hash("TapTweak", internal_pubkey.get_bytes() + rootABC)
print("TapTweak:", taptweak.hex())

# 4) Derive the segwit output address.
taproot_pubkey_b = internal_pubkey.tweak_add(taptweak).get_bytes()
taproot_pubkey_v1 = bytes([taproot_pubkey_b[0] & 1]) + taproot_pubkey_b[1:]
segwit_address = program_to_witness(1, taproot_pubkey_v1)
print('Segwit address:', segwit_address)
```

#### Programming Exercise 2.4.5 - Constructing a taproot output from a taptree.

```
# Generate Keypairs for internal pubkey and pay-to-pubkey TapScripts.
privkey_internal = ECKey().generate()
pubkey_internal = privkey_internal.get_pubkey()

privkeyA = ECKey().generate()
privkeyB = ECKey().generate()
privkeyC = ECKey().generate()
privkeyD = ECKey().generate()
pubkeyA = privkeyA.get_pubkey()
pubkeyB = privkeyB.get_pubkey()
pubkeyC = privkeyC.get_pubkey()
pubkeyD = privkeyD.get_pubkey()

# Construct Pay-to-Pubkey TapLeafs and Taptree.
TapLeafA = TapLeaf()
TapLeafB = TapLeaf()
TapLeafC = TapLeaf()
TapLeafD = TapLeaf()
TapLeafA.construct_pk(pubkeyA)
TapLeafB.construct_pk(pubkeyB)
TapLeafC.construct_pk(pubkeyC)
TapLeafD.construct_pk(pubkeyD)

# Create a Taptree with tapleafs and huffman constructor.
taptree = TapTree()
taptree.key = pubkey_internal
taptree.huffman_constructor([(1, TapLeafA), (1, TapLeafB), (2, TapLeafC), (3, TapLeafD)])

# Generate taproot tree with the `construct()` method, then use the taproot bytes to create a segwit address
taproot_script, tweak, control_map = taptree.construct()
program = bytes(taproot_script[2:])
address = program_to_witness(1, program)
print("Address: {}".format(address))
```

#### Programming Exercise 2.4.7: Sign the transaction for TapLeafA

```
# Generate the Taproot Signature Hash for signing
hash_types = [0,1,2,3,0x81,0x82,0x83]

sighashA = TaprootSignatureHash(spending_tx, 
                               [output], 
                               hash_types[0], 
                               input_index = 0, 
                               scriptpath = True, 
                               tapscript = TapLeafA.script)
                               
signatureA = privkeyA.sign_schnorr(sighashA)

print("Signature for TapLeafA: {}\n".format(signatureA.hex()))
```

#### Programming Exercise 2.4.8: Construct the witness, add it to the transaction and verify mempool acceptance

```
witness = CScriptWitness()
witness.stack = [signatureA, TapLeafA.script, control_map[TapLeafA.script]]
witness_in = CTxInWitness()
witness_in.scriptWitness = witness
spending_tx.wit.vtxinwit.append(witness_in)

# Serialize Schnorr transaction for broadcast
spending_tx_str = spending_tx.serialize().hex()
 
# Test mempool acceptance
assert test.nodes[0].testmempoolaccept([spending_tx_str])[0]['allowed']
print("Success!")

```
#### 1.3 Commutative property of scalar operations

```
a = random.randrange(1, SECP256K1_ORDER)
a_key = ECKey()
a_key.set(a.to_bytes(32,'big'), True) 

b = random.randrange(1, SECP256K1_ORDER)
b_key = ECKey()
b_key.set(b.to_bytes(32,'big'), True) 

# Left: Compute a + b
left_ab = (a + b) % SECP256K1_ORDER

# Right: Compute b + a
right_ba = int().from_bytes((b_key + a_key).get_bytes(),'big')

# Left/Right: Assert equality
assert left_ab == right_ba

# Left: Compute a * b
left_ab = (a * b) % SECP256K1_ORDER

# Right: Compute b * a
right_ba = int().from_bytes((b_key * a_key).get_bytes(),'big')

# Left/Right: Assert equality
assert left_ab == right_ba
```

#### 1.4 Distributivity of scalar operations

```
a = random.randrange(1, SECP256K1_ORDER)
a_key = ECKey()
a_key.set(a.to_bytes(32,'big'), True) 

b = random.randrange(1, SECP256K1_ORDER)
b_key = ECKey()
b_key.set(b.to_bytes(32,'big'), True) 

c = random.randrange(1, SECP256K1_ORDER)
c_key = ECKey()
c_key.set(c.to_bytes(32,'big'), True) 

# Left: Compute (a - b) * c
ab = (a + (SECP256K1_ORDER - b)) % SECP256K1_ORDER
left_abc = (ab * c) % SECP256K1_ORDER

# Right: Compute -b * c
# Negate a ECKey with negate() method.
b_key.negate()

# Right: Compute a * c
ac_key = a_key * c_key
bc_key = b_key * c_key

# Right: Compute a * c - b * c
ac_bc_key = ac_key + bc_key
right_abc = int().from_bytes(ac_bc_key.get_bytes(),'big')

# Left/Right: Assert equality
assert left_abc == right_abc
print("Success!")
```

#### 1.6 Distributivity over scalars and points

```
a = ECKey()
b = ECKey()
c = ECKey()
a.generate()
b.generate()
c.generate()
C = c.get_pubkey()

# Left: Compute a - b
a_minus_b = a - b

# Left: Compute (a - b) * C  
left =  a_minus_b * C

# Right: Compute a * C and (-b) * C
aC = a * C
bC = b * C

# Right: Compute aC - bC
right = aC - bC

# Left/Right: Assert equality
assert left.get_bytes() == right.get_bytes()
print("Success!")
```


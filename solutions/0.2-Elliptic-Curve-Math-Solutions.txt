#### 0.2.3 Commutative property of scalar operations

```
a = random.randrange(SECP256K1_ORDER / 2, SECP256K1_ORDER)
a_key = ECKey().set(a)

b = random.randrange(SECP256K1_ORDER / 2, SECP256K1_ORDER)
b_key = ECKey().set(b)

# Left: Compute a + b as ints (modulo the sepc256k1 group order)
left_a_plus_b = (a + b) % SECP256K1_ORDER

# Right: Compute b + a as ECKeys
right_b_plus_a = b_key + a_key

print("Left: {}".format(left_a_plus_b))
print("Right: {}\n".format(right_b_plus_a))

# Left/Right: Assert equality
assert left_a_plus_b == right_b_plus_a.secret

# Left: Compute a * b as ints (modulo the sepc256k1 group order)
left_a_times_b = (a * b) % SECP256K1_ORDER

# Right: Compute b * a as ECKeys
right_b_times_a = b_key * a_key

print("Left: {}".format(left_a_times_b))
print("Right: {}\n".format(right_b_times_a))

# Left/Right: Assert equality
assert left_a_times_b == right_b_times_a.secret
print("Success!")
```

#### 0.2.4 Distributivity of scalar operations

```
a = random.randrange(1, SECP256K1_ORDER)
a_key = ECKey().set(a)

b = random.randrange(1, SECP256K1_ORDER)
b_key = ECKey().set(b)

c = random.randrange(1, SECP256K1_ORDER)
c_key = ECKey().set(c)

# Left: Compute a - b as ints (modulo the sepc256k1 group order)
a_minus_b = (a  - b) % SECP256K1_ORDER

# Left: Compute (a - b) * c as ints (modulo the sepc256k1 group order)
left = (a_minus_b * c) % SECP256K1_ORDER

# Right: Compute a * c - b * c as ECKeys
right = a_key * c_key - b_key * c_key

print("Left: {}".format(left))
print("Right: {}".format(right))

# Left/Right: Assert equality
assert left == right.secret
print("\nSuccess!")
```

#### 0.2.6 Distributivity over scalars and points

```
a = ECKey().generate()
b = ECKey().generate()
c, C = generate_key_pair()

# Left: Compute (a - b) * C  
left =  (a - b) * C

# Right: Compute aC - bC
right = (a * C) - (b * C)

print("Left: {}".format(left))
print("Right: {}".format(right))

# Left/Right: Assert equality
assert left == right
print("\nSuccess!")
```

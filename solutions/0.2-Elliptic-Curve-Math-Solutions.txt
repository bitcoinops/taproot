#### 0.2.3 Commutative property of scalar operations

```
a = random.randrange(SECP256K1_ORDER / 2, SECP256K1_ORDER)
a_key = ECKey().set(a, True)

b = random.randrange(SECP256K1_ORDER / 2, SECP256K1_ORDER)
b_key = ECKey().set(b, True)

# Left: Compute a + b as ints (modulo the sepc256k1 field order)
left_a_plus_b = (a + b) % SECP256K1_ORDER

# Right: Compute b + a as ECKeys
right_b_plus_a = b_key + a_key

# Left/Right: Assert equality
assert left_a_plus_b == right_b_plus_a.as_int()

# Left: Compute a * b as ints (modulo the sepc256k1 field order)
left_a_times_b = (a * b) % SECP256K1_ORDER

# Right: Compute b * a as ECKeys
right_b_times_a = b_key * a_key

# Left/Right: Assert equality
assert left_a_times_b == right_b_times_a.as_int()
print("Success!")
```

#### 0.2.4 Distributivity of scalar operations

```
a = random.randrange(1, SECP256K1_ORDER)
a_key = ECKey().set(a, True)

b = random.randrange(1, SECP256K1_ORDER)
b_key = ECKey().set(b, True)

c = random.randrange(1, SECP256K1_ORDER)
c_key = ECKey().set(c, True)

# Left: Compute (a - b) * c as ints (modulo the sepc256k1 field order)
ab = (a + (SECP256K1_ORDER - b)) % SECP256K1_ORDER
left_abc = (ab * c) % SECP256K1_ORDER

# Right: Compute -b * c as ECKeys
# Negate a ECKey with negate() method.
b_key.negate()

# Right: Compute a * c
ac_key = a_key * c_key
bc_key = b_key * c_key

# Right: Compute a * c - b * c
right_abc = ac_key + bc_key

# Left/Right: Assert equality
assert left_abc == right_abc.as_int()
print("Success!")
```

#### 0.2.6 Distributivity over scalars and points

```
a = ECKey().generate()
b = ECKey().generate()
c = ECKey().generate()
C = c.get_pubkey()

# Left: Compute (a - b) * C  
left =  (a - b) * C

# Right: Compute a * C and (-b) * C
aC = a * C
bC = b * C

# Right: Compute aC - bC
right = aC - bC

# Left/Right: Assert equality
assert left.get_bytes() == right.get_bytes()
print("Success!")
```

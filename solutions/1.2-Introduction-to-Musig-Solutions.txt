#### 1.2.1 Compute 3-of-3 MuSig public key

```
# Compute key pairs
privkey0 = ECKey().generate()
privkey1 = ECKey().generate()
privkey2 = ECKey().generate()
pubkey0 = privkey0.get_pubkey()
pubkey1 = privkey1.get_pubkey()
pubkey2 = privkey2.get_pubkey()
pubkeys = [pubkey0, pubkey1, pubkey2]

# Compute Key Challenges
c_map, pubkey_musig = generate_musig_key(pubkeys)
print("Aggregated Public Key is {}\n".format(pubkey_musig.get_bytes().hex()))

# Multiply key pairs by challenge factor
privkey0_c = privkey0.mul(c_map[pubkey0])
privkey1_c = privkey1.mul(c_map[pubkey1])
privkey2_c = privkey2.mul(c_map[pubkey2])
pubkey0_c = pubkey0.mul(c_map[pubkey0])
pubkey1_c = pubkey1.mul(c_map[pubkey1])
pubkey2_c = pubkey2.mul(c_map[pubkey2])

print("Tweaked privkey0 is {}".format(privkey0_c.secret))
print("Tweaked privkey1 is {}".format(privkey1_c.secret))
print("Tweaked privkey2 is {}".format(privkey2_c.secret))
```

#### 1.2.2 Compute 3-of-3 MuSig nonce

```
# Generate nonces
k0 = generate_schnorr_nonce()
k1 = generate_schnorr_nonce()
k2 = generate_schnorr_nonce()
R0 = k0.get_pubkey()
R1 = k1.get_pubkey()
R2 = k2.get_pubkey()

# Nonce point commitment round
R0_digest = hashlib.sha256(R0.get_bytes()).digest()
R1_digest = hashlib.sha256(R1.get_bytes()).digest()
R2_digest = hashlib.sha256(R2.get_bytes()).digest()

# Aggregate nonces
# Method: use aggregate_schnorr_nonces()
# Negate individual nonces if necessary
R_agg, negated = aggregate_schnorr_nonces([R0, R1, R2])
if negated:
    k0.negate()
    k1.negate()
    k2.negate()

print("Individual nonces are {}, {}, {}.\n".format(k0.secret, k1.secret, k2.secret))
print("Aggregate nonce point is {}\n".format(R_agg.get_bytes().hex()))
print("R_agg was negated:", negated)
```

#### 1.2.3 Compute aggregated MuSig signature

```
msg = hashlib.sha256(b'transaction').digest()

# Generate individual signatures
sig0 = sign_musig(privkey0_c, k0, R_agg, pubkey_musig, msg)
sig1 = sign_musig(privkey1_c, k1, R_agg, pubkey_musig, msg)
sig2 = sign_musig(privkey2_c, k2, R_agg, pubkey_musig, msg)

# Aggregate signatures
sig_agg = aggregate_musig_signatures([sig0, sig1, sig2])

# Verify signature
assert pubkey_musig.verify_schnorr(sig_agg, msg)
print("Success! Signature verifies against MuSig pubkey")
```
